//this is the adventure game rendered
// create the game instance
var game = new RL.Game();
//105 characters for each mapData index and there are 57 elements
var mapData = [
    "#########################################################################################################",
    "#.........#..........#......................................................e.........................#Z#",
    "#u...e..:.#....##....#..........................................................................e.....+.#",
    "#k........+....##....#........................e....................e.........................e........#b#",
    "#p........#..........+......................................................e...................e.....#.#",
    "#n#..#..#.#..........#......................e....e....................................................#b#",
    "#.........#...####+#+#................................e...........e.........e.........................#.#",
    "#.........#...#......#..........................................................................e.....#b#",
    "#.........#...#......#.................e...........e...............e...........e......................#.#",
    "#.........#...#......#................................................................................+.#",
    "######################################################################+################################.#",
    "#...#...............#...............#...........#...................#...#.............................#.#",
    "#...#...#########...#...#####...#########...#####...#####...#####...#...#.............................#.#",
    "#...............#.......#...#...........#...........#...#...#.......#...#.............................#.#",
    "#########...#...#########...#########...#####...#...#...#...#########...#.............................#.#",
    "#.......#...#...............#...........#...#...#...#...#...........#...#.............................#.#",
    "#...#...#############...#...#...#########...#####...#...#########...#...#.............................#.#",
    "#...#...............#...#...#.......#...........#...........#.......#...#.............................#.#",
    "#...#############...#####...#####...#...#####...#########...#...#####...#.............................#.#",
    "#...........#.......#...#.......#...#.......#...........#...#...........#.............................#.#",
    "#...#####...#####...#...#####...#...#########...#...#...#...#############.............................#.#",
    "#.......#.......#...#...#.......#.......#.......#...#...#.......#.......#.............................#.#",
    "#############...#...#...#...#########...#...#####...#...#####...#####...#.............................#.#",
    "#...........#...#...........#.......#...#.......#...#.......#...........#.............................#.#",
    "#...#####...#...#########...#####...#...#####...#####...#############...#.............................#.#",
    "#...#.......#...........#...........#.......#...#...#...............#...+.............................#.#",
    "#...#...#########...#...#####...#########...#...#...#############...#...#.............................#.#",
    "#...#...........#...#...#...#...#...........#...............#...#.......#.............................#.#",
    "#...#########...#...#...#...#####...#########...#########...#...#########.............................#.#",
    "#...#.......#...#...#...........#...........#...#.......#...............#.............................#.#",
    "#...#...#####...#####...#####...#########...#####...#...#########...#...#.............................#.#",
    "#.e.#...................#...........#...............#...............#...#.............................#.#",
    "##########################################+##########################################################+#.#",
    "#......................#.................#......#.................#.........................#.........#.#",
    "#..##################..#.#########.#.#.###.#....#.###...###########.#.######.##############.#.#######.#.#",
    "#..#................#..#.....#...#.#.#.....########.###.............#........#............#.#.#.......#.#",
    "#..#..############..#..#####.#.#.#.#.#####..........#.#.##.#################.######.#####.#.#.#.#######.#",
    "#..#..#.............#..#...#.#.#.#.#.....#.######.#.#...#..#...#.#........................#..........##.#",
    "#..#..#...###########..#.#.#.#.#.###.##.##..........#.#.#.##.#.#.##############.###########.########.##.#",
    "#.....#................#.#...#.#...#.##.#..#####.##.#.#...#..#............................#...........#.#",
    "######################...#.#.#.#.#.#.#..#.........#.#...#...#######################.############.####.#.#",
    "#..#...................#...#.#.#.#...#.########.#.#.#######.#.....................#.#............#....#.#",
    "#..#.#################...##.##.###.#.#.#....+.#.#.#.........#.#####################.#.#.#######..####.#.#",
    "#..#.#.#...#...#...#...#.##.#.####.#.#.#....#.#.#.#.###.#####.......................#.#.#.....#..#....#.#",
    "#..#.#...#...#...#...#....#.#.####.#.#.######.#.#.#.#.#.......#####################.#.#.#.#.#.#..#.####.#",
    "#..#.#.#...#...#...#...####.#......#.#...+..#.#.....#.#.#######...................#.#.#.#.#.#.#..#....#.#",
    "#..#.#.#################.#..#####..#####.####.#####.#.#.........###################.#.#.#.#.#.#..#.####.#",
    "#..#.....................#......#........#..............#########...................#.#.#.#.#.#..#....#.#",
    "#..#.##########################.########.#.########.######........#################.#.#.#.#.#.#..##.###.#",
    "#..#.#..................................................#..######.#.................#.#.#.#.#.#...#...#.#",
    "#..#.####################.###############################.##......##############.##########.#####.###.#.#",
    "#..#....................#.................................#..####..............#..........#.....#.....#.#",
    "#..###################..#.################.############################.#############.#########.#####.#.#",
    "#.......................#................#............................................................#.#",
    "#+#####################################################################################################.#",
    "#.......................................................................................................#",
    "#########################################################################################################"
];

// Tile types
var mapCharToType = {
    '#': 'wall',
    '.': 'grass',
    '+': 'door',
    '\'': 'door-open'
};

var entityCharToType = {
    'e': 'slime',
    'Z': 'owl',
    'b': 'bird',
    'n': 'ninja',
    'k': 'knight',
    'p': 'pirate',
    'u': 'pikachu'
};

var itemCharToType = {
  ':': 'potion'
};

var keyBindings = {
    up: ['UP_ARROW', 'K', 'W'],
    down: ['DOWN_ARROW', 'J', 'S'],
    left: ['LEFT_ARROW', 'H', 'A'],
    right: ['RIGHT_ARROW', 'L', 'D'],
};

game.map.loadTilesFromArrayString(mapData, mapCharToType, 'grass');
game.itemManager.loadFromArrayString(mapData, itemCharToType);
game.entityManager.loadFromArrayString(mapData, entityCharToType);

// generate and assign a map object (replaces empty default)
game.setMapSize(game.map.width, game.map.height);

// add input keybindings
game.input.addBindings(keyBindings);

// set player starting position
game.player.x = 3;
game.player.y = 3;

// make the view a little smaller (10x10 characters)
game.renderer.resize(10, 10);

// get existing DOM elements
var mapContainerEl = document.getElementById('roguelike-map-container');
var consoleContainerEl = document.getElementById('roguelike-console-container');

// append elements created by the game to the DOM
mapContainerEl.appendChild(game.renderer.canvas);
consoleContainerEl.appendChild(game.console.el);

game.renderer.layers = [
    new RL.RendererLayer(game, 'map',       {draw: false,   mergeWithPrevLayer: false}),
    new RL.RendererLayer(game, 'item',      {draw: false,   mergeWithPrevLayer: true}),
    new RL.RendererLayer(game, 'entity',    {draw: false,   mergeWithPrevLayer: true}),
    new RL.RendererLayer(game, 'lighting',  {draw: true,    mergeWithPrevLayer: false}),
    new RL.RendererLayer(game, 'fov',       {draw: true,    mergeWithPrevLayer: false})
];
//create a randomized map for each level.

// var randomEnemy = function () {
//     for (var i = 0; i < mapData.length; i++) {
//         if (mapData[i] === ".") {

//         }
//     }
// }
// ROT.Map.IceyMaze = function(width, height, regularity) {
//     ROT.Map.call(this, width, height);
//     this._regularity = regularity || 0;
// }
// ROT.Map.IceyMaze.extend(ROT.Map);
//
// ROT.Map.IceyMaze.prototype.create = function(callback) {
//     var width = this._width;
//     var height = this._height;
//
//     var map = this._fillMap(1);
//
//     width -= (width % 2 ? 1 : 2);
//     height -= (height % 2 ? 1 : 2);
//
//     var cx = 0;
//     var cy = 0;
//     var nx = 0;
//     var ny = 0;
//
//     var done = 0;
//     var blocked = false;
//     var dirs = [
//         [0, 0],
//         [0, 0],
//         [0, 0],
//         [0, 0]
//     ];
//     do {
//         cx = 1 + 2*Math.floor(ROT.RNG.getUniform()*(width-1) / 2);
//         cy = 1 + 2*Math.floor(ROT.RNG.getUniform()*(height-1) / 2);
//
//         if (!done) { map[cx][cy] = 0; }
//
//         if (!map[cx][cy]) {
//             this._randomize(dirs);
//             do {
//                 if (Math.floor(ROT.RNG.getUniform()*(this._regularity+1)) == 0) { this._randomize(dirs); }
//                 blocked = true;
//                 for (var i=0;i<4;i++) {
//                     nx = cx + dirs[i][0]*2;
//                     ny = cy + dirs[i][1]*2;
//                     if (this._isFree(map, nx, ny, width, height)) {
//                         map[nx][ny] = 0;
//                         map[cx + dirs[i][0]][cy + dirs[i][1]] = 0;
//
//                         cx = nx;
//                         cy = ny;
//                         blocked = false;
//                         done++;
//                         break;
//                     }
//                 }
//             } while (!blocked);
//         }
//     } while (done+1 < width*height/4);
//
//     for (var i=0;i<this._width;i++) {
//         for (var j=0;j<this._height;j++) {
//             callback(i, j, map[i][j]);
//         }
//     }
//     this._map = null;
//     return this;
// }
//
// ROT.Map.IceyMaze.prototype._randomize = function(dirs) {
//     for (var i=0;i<4;i++) {
//         dirs[i][0] = 0;
//         dirs[i][1] = 0;
//     }
//
//     switch (Math.floor(ROT.RNG.getUniform()*4)) {
//         case 0:
//             dirs[0][0] = -1; dirs[1][0] = 1;
//             dirs[2][1] = -1; dirs[3][1] = 1;
//         break;
//         case 1:
//             dirs[3][0] = -1; dirs[2][0] = 1;
//             dirs[1][1] = -1; dirs[0][1] = 1;
//         break;
//         case 2:
//             dirs[2][0] = -1; dirs[3][0] = 1;
//             dirs[0][1] = -1; dirs[1][1] = 1;
//         break;
//         case 3:
//             dirs[1][0] = -1; dirs[0][0] = 1;
//             dirs[3][1] = -1; dirs[2][1] = 1;
//         break;
//     }
// }
